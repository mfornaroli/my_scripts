python language
sw engineering
data science
databases

google: python interview questions. 
pandas interview questions. 
_____________________________________________________

examples:

append, remove methods (lists)
format method (strings) ({})

check: enumerate function. 
enumerate(list_1)   >> [(0, 'eat'), (1, 'sleep'), (2, 'repeat')]
enumerate(string_1) >> [(2, 'g'), (3, 'e'), (4, 'e'), (5, 'k')]
returns list of tuples (i guess?) containing both index and value associated to index. 

print("{} is less than {}".format(a,b))
Fizz Buzz (if , elif, elif, else, % operator..)
a,b=0,1			# si puo fare cosi!
a, b = b, a + b		# fibonacci series

strings, lists, tooples, disctionaries, sets.Tuple items are immutable
list: dynamic. can i modify a list in a tuple? yes. 
tuple: data with fixed structure
The list(), dict(), tuple(), and set() functions may be used to create list, dictionary, tuple, and set objects, respectively. 
print(dict(one = 1, two = 2, three = 3))
print(tuple((1, 2, 3)))
Set items cannot be accessed by index.

my_dict = {'name': 'Antonio', 'age' : '2', 'occupation': 'carpenteer'}
for k,val in my_dict.iteritems():
	print("my {} is {}".format(k, val))

dictionary = {1: "one", 2: "two", 3: "three"}
for key in dictionary:
    print("dictionary[%s]: %s" % (key, dictionary[key]))
    print()

"a disctionary is a hash table" (what does it mean?)
theory behind each data type, and when/how to properly use them. 

list comprehension
squares = [num*num for num in list] 	#returns a list with squares. 

### generators ###
def fib(num):
 a,b=0,1
 for i in xrange(0, num):
  yield("{} : {}".format(i+1, a))
  a, b = b, a+b

for item in fib(10):
 print(item)


A generator is very similar to a function that returns an array, in 
that a generator has parameters, can be called, and generates a 
sequence of values. However, instead of building an array containing 
all the values and returning them all at once, a generator yields
the values one at a time, which requires less memory and allows the caller 
to get started processing the first few values immediately.

>> check: linear fit (scatter plot) --> get regression line 

### shallow copy ### just top level stuff copied. 
l1=[1,2,3]
l2=l1		#reference of l1 in l2! not really a copy. 
l2.append(4)
print(l2) >> 1,2,3,4 
print(l1) >> 1,2,3,4 as well! also if we modify the other, both changes!
import copy
l3=copy.copy(l2) >> now if we append something to l3, only l3 changes. 
id(l1)
id(l2)
id(l3)   >> to check the memory location, l1 and l2 have the same, l3 another one. 

### deep copy ###  takes care of much more / makes the program slow.
l4=copy.deep_copy(l2)
id(l4)

### ternary operator ###
a,b=45,42
big = a if a > b else b
print(big)

### sorting algo ###
list=['1', '2', '3', '10', '6', '7']
int_list = [int(i) for i in list]
int_list.sort()
print(int_list)

### dict comprehension ###
a2 = {i:i*i for i in range(10)}
>> {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}

### data analysis ###

import numpy as np
arr=np.array([1,3,6,4,2])
p=np.percentile(arr,50)  # median
l1=[[1,2,3],[4,5,6]]
l1_arr=np.array(l1)    
# elemnt-wise multiplication, addition, division

### pandas ###
df.columns = [new names list]   # change column names













































	
